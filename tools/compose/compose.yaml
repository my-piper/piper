---
volumes:
  mongo-data:
  redis-data:
  kafka-data:
  clickhouse-data:
  clickhouse-logs:
  seaweedfs-data:
  nocodb-data:
  postgres-data:

services:
  mongo:
    image: mongo:8.0
    ports:
      - "127.0.0.1:27017:27017"
    volumes:
      - mongo-data:/data/db

  imgproxy:
    image: darthsim/imgproxy:v3.18.2
    environment:
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/data
    volumes:
      - ./storage:/data/storage:ro

  redis:
    image: redis/redis-stack:7.2.0-v12
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data

  bullboard:
    container_name: bullboard
    image: deadly0/bull-board
    restart: always
    ports:
      - 3000:3000
    environment:
      REDIS_HOST: redis
      REDIS_DB: 5
      REDIS_USE_TLS: "false"

  nginx:
    image: nginx:1.25.2
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ../../tmp/storage:/var/www/storage:ro
    ports:
      - "80:80"
    healthcheck:
      test: service nginx status || exit 1
      interval: 2s
      retries: 10
      start_period: 5s
      timeout: 5s

  clickhouse:
    image: clickhouse/clickhouse-server:24.8.4
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-logs:/val/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    ports:
      - 9094:9094
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - CLUSTER_ID=45vUBEgyQjSywv_811biQw
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=EXTERNAL://localhost:9094,INTERNAL://kafka:9092
      - KAFKA_LISTENERS=CONTROLLER://kafka:9093,EXTERNAL://0.0.0.0:9094,INTERNAL://kafka:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka
    ports:
      - "8088:8080"
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=kafka-local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092

  gpt4free:
    image: hlohaus789/g4f:latest
    platform: linux/amd64
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:1337:1337"
      - "127.0.0.1:7900:7900"
    volumes:
      - ./tmp/har_and_cookies:/app/har_and_cookies
      - ./tmp/generated_images:/app/generated_images

  seaweedfs:
    image: chrislusf/seaweedfs:3.73
    ports:
      - 9333:9333
      - 8333:8333
      - 8888:8888
    command:
      - "server"
      - "-master.port=9333"
      - "-master.volumeSizeLimitMB=64"
      - "-s3"
      - "-s3.config=/etc/weed/s3.json"
      - "-dir=/data"
    volumes:
      - seaweedfs-data:/data
      - ./seaweedfs/s3/config.json:/etc/weed/s3.json:ro

  nocodb:
    image: nocodb/nocodb:latest
    environment:
      NC_DB: "pg://host.docker.internal:5432?u=postgres&p=xyzXYZ&d=nocodb"
      NC_PUBLIC_URL: http://localhost/nocodb
      NC_AUTH_JWT_SECRET: xyzXYZ
    volumes:
      - nocodb-data:/usr/app/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8089:8080"
    depends_on:
      - postgres

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: nocodb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: xyzXYZ
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
